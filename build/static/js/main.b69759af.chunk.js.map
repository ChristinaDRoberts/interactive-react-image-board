{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ImageForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","caption","url","name","handleChange","bind","assertThisInitialized","handleSubmit","e","console","log","target","setState","value","preventDefault","picture","react_default","a","createElement","className","onSubmit","htmlFor","type","id","placeholder","onChange","Component","PicturesList","pictures","map","index","key","src","ImageBoard","_this2","slice","unshift","App_ImageForm","App_PicturesList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b69759af.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\n\nclass ImageForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            caption: '',\n            url: '',\n            name: ''\n\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n      console.log(e.target);\n\n      if (e.target.name === 'url') {\n          this.setState({url: e.target.value})\n\n\n      } else if (e.target.name === 'caption') {\n          this.setState({caption: e.target.value})\n\n      } else {\n          this.setState({name: e.target.value})\n      }\n  }\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    let picture = {caption: this.state.caption, url: this.state.url, name: this.state.name};\n\n    this.props.handleSubmit(picture);\n\n    this.setState({caption: '', url: '', name: ''});\n  }\n\n  render() {\n    return (\n        <div className=\"formBox\">\n              <form onSubmit={this.handleSubmit}>\n                <label htmlFor=\"name\">\n                  User Name:\n                  <input type=\"text\" name=\"name\" id=\"name\" className=\"text\" placeholder=\"Enter Your Name Here\" value={this.state.name} onChange={this.handleChange}/>\n                </label>\n\n                  <label htmlFor=\"caption\">\n                  Description:\n                  <input type=\"text\" name=\"caption\" id=\"caption\" className=\"text\" placeholder=\"Enter A Caption Here\" value={this.state.caption} onChange={this.handleChange}/>\n                </label>\n\n                  <label htmlFor=\"url\">\n                  Image URL:\n                  <input type=\"text\" name=\"url\" id=\"url\" className=\"text\" placeholder=\"Enter a Valid URL Here\" value={this.state.url} onChange={this.handleChange}/>\n                </label>\n                  <br/>\n\n                  <input type='submit' className=\"addPic\" value='ADD PHOTO'/>\n              </form>\n        </div>\n    )\n  }\n\n\n\n}\n\n\n/*//child class bc I am putting it in my render in App*/\nclass PicturesList extends Component {\n    render(props) {\n        console.log('props', this.props);\n\n\n        let pictures = this.props.pictures.map(function(picture, index) {\n            return (\n                <div key={index} className=\"picDiv\">\n                        <img src={picture.url}/>\n                        <p>{picture.caption}</p>\n                        <p>By: {picture.name}</p>\n                    </div>\n            )\n\n        });\n\n\n\n\n        return (\n            <ul>\n                {pictures}\n            </ul>\n\n        )\n  }\n\n}\n\n\n\n//parent class\nclass ImageBoard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pictures: [{caption: \"My Escape\", url: \"https://i.pinimg.com/564x/b6/ae/51/b6ae511d854df7efd6786a1e7d16fa0e.jpg?b=t\", name: \"Kelly Bright\"},\n                {caption: \" Echo \", url: \"https://images.pexels.com/photos/291732/pexels-photo-291732.jpeg?cs=srgb&dl=adventure-cold-daylight-291732.jpg&fm=jpg\", name: \"Sarah Waters\"},\n                {caption: \"Welcoming The Bees For Lunch\", url: \"https://images.pexels.com/photos/87840/daisy-pollen-flower-nature-87840.jpeg?cs=srgb&dl=bloom-blossom-close-up-87840.jpg&fm=jpg\", name: \"Theresa Modesto\"}]\n        };\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n\n\n    handleSubmit(picture){\n        let pictures = this.state.pictures.slice();\n        pictures.unshift(picture);\n        this.setState({pictures})\n\n    }\n\n\n            render(){\n        console.log('this props', this.props);\n                return (\n                    <div className=\"mainApp\">\n                        <h1 className=\"heading\"> Thank You For Visiting Christina's React Picture Board</h1>\n                        <h3 className=\"feelFree\"> Feel Free To Add Your Own Pictures By Completing The Form Below</h3>\n                             <ImageForm  className=\"forms\" handleSubmit={this.handleSubmit}/>\n                            <PicturesList className=\"pictureList\" pictures={this.state.pictures}/>\n\n                    </div>\n            )\n        }\n}\n\n\nexport default ImageBoard;\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}